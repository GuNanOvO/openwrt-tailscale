name: Smaller Tailscale Build Pipeline

on:
  schedule:
    - cron: '30 0/12 * * *'
  workflow_dispatch:

env:
  SOFTWARE_NAME: "Tailscale"
  FILE_NAME: "tailscaled"
  REPO: "tailscale/tailscale"
  REPO_SMALL: "GuNanOvO/openwrt-tailscale"
  ARTIFACT_DIR: "artifacts"

jobs:
  version-check:
    name: Check Version Differences
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.compare.outputs.should_build }}
      upstream_tag: ${{ steps.get_upstream.outputs.tag }}
    steps:
      - name: Get upstream version
        id: get_upstream
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: 'tailscale',
              repo: 'tailscale'
            })
            return { tag: data.tag_name }
      
      - name: Get small repo version
        id: get_small
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data } = await github.rest.repos.getLatestRelease({
                owner: 'GuNanOvO',
                repo: 'openwrt-tailscale'
              })
              return { tag: data?.tag_name || '' }
            } catch (error) {
              return { tag: '' }
            }
      
      - name: Compare versions
        id: compare
        run: |
          if [ "${{ steps.get_upstream.outputs.tag }}" != "${{ steps.get_small.outputs.tag }}" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build for ${{ matrix.platform.id }}
    needs: version-check
    if: needs.version-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { id: 'arm',    goarch: 'arm',    flags: '' },
          { id: 'arm64',  goarch: 'arm64',  flags: '' },
          { id: 'mips',   goarch: 'mips',   flags: 'GOMIPS=softfloat' },
          { id: 'mipsle', goarch: 'mips',   flags: 'GOMIPS=softfloat' },
          { id: 'mips64',  goarch: 'mips64', flags: 'GOMIPS=softfloat' },
          { id: 'mips64le', goarch: 'mips64le', flags: 'GOMIPS=softfloat' },
          { id: '386',     goarch: '386',    flags: '' },
          { id: 'amd64',  goarch: 'amd64',  flags: 'CGO_ENABLED=1 CC=musl-gcc', setup: 'apt-get install -y musl-tools' },
          { id: 'geode',  goarch: '386',    flags: 'GO386=softfloat' }
        ]
      fail-fast: false

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ needs.version-check.outputs.upstream_tag }}
          path: src

      - name: Setup build environment
        run: |
          ${{ matrix.platform.setup || 'echo "No additional setup required"' }}
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Build binary
        working-directory: ./src
        env:
          GOOS: linux
          GOARCH: ${{ matrix.platform.goarch }}
          GOMIPS: ${{ matrix.platform.gomips || '' }}
          GO386: ${{ matrix.platform.go386 || '' }}
          CGO_ENABLED: ${{ matrix.platform.cgo_enabled || 0 }}
          CC: ${{ matrix.platform.cc || '' }}
        run: |
          output_name="${{ env.FILE_NAME }}-${{ matrix.platform.id }}"
          ./build_dist.sh \
            --extra-small --box \
            -o "../${{ env.ARTIFACT_DIR }}/$output_name" \
            ./cmd/${{ env.FILE_NAME }}
          
          # Verify the binary was created
          if [ ! -f "../${{ env.ARTIFACT_DIR }}/$output_name" ]; then
            echo "::error::Build failed for ${{ matrix.platform.id }}"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-${{ matrix.platform.id }}
          path: ${{ env.ARTIFACT_DIR }}/${{ env.FILE_NAME }}-${{ matrix.platform.id }}

  release:
    name: Create Release
    needs: [version-check, build]
    if: needs.version-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: ${{ needs.version-check.outputs.upstream_tag }}
    steps:
      - name: Prepare workspace
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          mkdir -p compressed

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.ARTIFACT_DIR }}

      - name: Setup UPX
        uses: crazy-max/ghaction-upx@v2
        with:
          version: latest

      - name: Process binaries
        run: |
          # Process each binary
          for bin in ${{ env.ARTIFACT_DIR }}/${{ env.FILE_NAME }}-*; do
            filename=$(basename "$bin")
            
            # Skip unsupported platforms
            if [[ "$filename" =~ (mips64|mips64le) ]]; then
              echo "Skipping UPX for $filename"
              cp "$bin" "compressed/${filename}-normal"
              continue
            fi
            
            # Create uncompressed copy
            cp "$bin" "compressed/${filename}-normal"
            
            # Compress with UPX
            upx --lzma --best --no-progress "$bin" -o "compressed/$filename"
          done

      - name: Generate release files
        run: |
          # Create checksums
          cd compressed
          sha256sum * > checksums.txt
          
          # Create info file
          {
            echo "Version: ${{ env.RELEASE_TAG }}"
            echo "Build date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            echo "File sizes:"
            for file in ${{ env.FILE_NAME }}-*; do
              size=$(stat -c %s "$file")
              echo "$file $size bytes"
            done
          } > build-info.txt
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Smaller ${{ env.SOFTWARE_NAME }} ${{ env.RELEASE_TAG }}"
          body: |
            ## 🚀 Smaller Tailscale / 更小的Tailscale
            **Version | 版本:** ${{ env.RELEASE_TAG }}  
            **Build date | 构建日期:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')  
            **Changelog | 更新日志:** https://github.com/${{ env.REPO }}/releases/tag/${{ env.TAG }}  

            ### Build Features
            - Combined `tailscale` & `tailscaled` into single binary  
            - Combined binary with `--extra-small` flag  
            - UPX compressed (except mips64 variants)  

            ### Requirements
            - **Storage**: less than 10MB (UPX compressed)  
            - **RAM**: about 60MB (during operation)  
            - **Warning**: May not work on devices with <256MB RAM

            ### About -normal version
            May provide better security:
            - `filename-normal`: Original binary
            - `filename`: UPX compressed

            ### 构建特性
            - 将 `tailscale` 与 `tailscaled` 合并为单一二进制文件  
            - 使用 `--extra-small` 极简编译选项  
            - UPX 压缩 (mips64架构除外)  

            ### 需求说明
            - **存储空间**: 小于 10MB (UPX 压缩后)  
            - **运行内存**: 大约 60MB (运行时)  
            - **警告**: 内存小于 256MB 的设备可能无法运行  

            ### 未压缩版本说明
            可能提供更好的安全性:
            - `filename-normal`: 原始二进制
            - `filename`: UPX压缩版本
          files: |
            compressed/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync to small repo
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.git.createTag({
              owner: 'GuNanOvO',
              repo: 'openwrt-tailscale',
              tag: '${{ env.RELEASE_TAG }}',
              message: 'Release ${{ env.RELEASE_TAG }}',
              object: '${{ github.sha }}',
              type: 'commit'
            })