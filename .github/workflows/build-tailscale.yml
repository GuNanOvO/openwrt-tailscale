name: Smaller Tailscale Build Pipeline

on:
  schedule:
    - cron: '30 0/12 * * *'
  workflow_dispatch:

env:
  SOFTWARE_NAME: "Tailscale"
  FILE_NAME: "tailscaled"
  REPO: "tailscale/tailscale"
  REPO_SMALL: "GuNanOvO/openwrt-tailscale"
  REPO_SMALL_NAME: "openwrt-tailscale"
  REPO_SMALL_OWNER: "GuNanOvO"
  ARTIFACT_DIR: "artifacts"
  BUILD_DATE: ""
jobs:
  version-check:
    name: Check Version Differences
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.compare.outputs.should_build }}
      upstream_tag: ${{ steps.get_upstream.outputs.tag }}
    steps:
      - name: Get latest stable tag from tailscale
        id: get_upstream
        uses: actions/github-script@v6
        with:
          script: |
            const { data: tags } = await github.rest.repos.listTags({
              owner: 'tailscale',
              repo: 'tailscale',
              per_page: 100
            });

            const stableTags = tags
              .map(tag => tag.name)
              .filter(name => /^v\d+\.\d+\.\d+$/.test(name));

            stableTags.sort((a, b) => {
              const parse = v => v.slice(1).split('.').map(Number);
              const [a1, a2, a3] = parse(a);
              const [b1, b2, b3] = parse(b);
              return b1 - a1 || b2 - a2 || b3 - a3;
            });

            const latest = stableTags[0] || '';
            core.setOutput('tag', latest);

      - name: Get latest release tag from openwrt-tailscale
        id: get_small
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data } = await github.rest.repos.getLatestRelease({
                owner: 'GuNanOvO',
                repo: 'openwrt-tailscale'
              });
              core.setOutput('tag', data?.tag_name || '');
            } catch (error) {
              core.setOutput('tag', '');
            }

      - name: Compare versions
        id: compare
        run: |
          echo "Upstream: ${{ steps.get_upstream.outputs.tag }}"
          echo "Local: ${{ steps.get_small.outputs.tag }}"
          if [ "${{ steps.get_upstream.outputs.tag }}" != "${{ steps.get_small.outputs.tag }}" ]; then
            echo "should_build=true" >> ${GITHUB_OUTPUT}
          else
            echo "should_build=false" >> ${GITHUB_OUTPUT}
          fi

  build:
    name: Build for ${{ matrix.platform.id }}
    needs: version-check
    if: needs.version-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          {
            id: 'arm',
            goarch: 'arm',
            openwrt_targets: 
              [
              'arm_arm1176jzf-s_vfp',
              'arm_arm926ej-s',
              'arm_cortex-a15_neon-vfpv4',
              'arm_cortex-a5_vfpv4',
              'arm_cortex-a7',
              'arm_cortex-a7_neon-vfpv4',
              'arm_cortex-a7_vfpv4',
              'arm_cortex-a8_vfpv3',
              'arm_cortex-a9',
              'arm_cortex-a9_neon',
              'arm_cortex-a9_vfpv3-d16',
              'arm_fa526',
              'arm_xscale',
              'arm_mpcore'
            ]
          },
          {
            id: 'arm64',
            goarch: 'arm64',
            openwrt_targets: [
              'aarch64_cortex-a53',
              'aarch64_cortex-a72',
              'aarch64_cortex-a76',
              'aarch64_generic'
            ]
          },
          {
            id: 'mips',
            goarch: 'mips',
            gomips: 'softfloat',
            openwrt_targets: [
              'mips_24kc',
              'mips_4kec',
              'mips_mips32'
            ]
          },
          {
            id: 'mipsle',
            goarch: 'mipsle',
            gomips: 'softfloat',
            openwrt_targets: [
              'mipsel_24kc',
              'mipsel_24kc_24kf',
              'mipsel_74kc',
              'mipsel_mips32'
            ]
          },
          {
            id: 'mips64',
            goarch: 'mips64',
            gomips: 'softfloat',
            openwrt_targets: [
              'mips64_mips64r2',
              'mips64_octeonplus'
            ]
          },
          {
            id: 'mips64le',
            goarch: 'mips64le',
            gomips: 'softfloat',
            openwrt_targets: [
              'mips64el_mips64r2'
            ]
          },
          {
            id: '386',
            goarch: '386',
            openwrt_targets: [
              'i386_pentium-mmx',
              'i386_pentium4'
            ]
          },
          {
            id: 'amd64',
            goarch: 'amd64',
            cgo_enabled: '1',
            cc: 'musl-gcc',
            setup: 'sudo apt-get update && sudo apt-get install -y musl-tools',
            openwrt_targets: [
              'x86_64'
            ]
          },
          {
            id: 'geode',
            goarch: '386',
            go386: 'softfloat',
            openwrt_targets: [
              'i386_pentium-mmx',
              'i386_pentium4'
            ]
          }
        ]

      fail-fast: false

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ needs.version-check.outputs.upstream_tag }}
          path: src

      - name: Checkout packaging files
        uses: actions/checkout@v4
        with:
          path: packaging

      - name: Setup build environment
        run: |
          ${{ matrix.platform.setup || 'echo "No additional setup required"' }}
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true
          cache-dependency-path: src/go.sum

      - name: Setup UPX
        uses: crazy-max/ghaction-upx@v2
        with:
          version: latest

      - name: Build binary
        working-directory: ./src
        env:
          GOOS: linux
          GOARCH: ${{ matrix.platform.goarch }}
          GOMIPS: ${{ matrix.platform.gomips || '' }}
          GO386: ${{ matrix.platform.go386 || '' }}
          CGO_ENABLED: ${{ matrix.platform.cgo_enabled || 0 }}
          CC: ${{ matrix.platform.cc || '' }}
        run: |
          output_name="${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}"
          mkdir -p ../build
          ./build_dist.sh \
            --extra-small --box \
            -o "../build/${output_name}" \
            ./cmd/${{ env.FILE_NAME }}
          
          # Verify the binary was created
          if [ ! -f "../build/${output_name}" ]; then
            echo "::error::Build failed for ${{ matrix.platform.id }}"
            exit 1
          fi

      - name: Process binary
        run: |
          # Process binary
          mkdir -p compressed "${{ env.ARTIFACT_DIR }}"
          filename="${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}"
          file="build/${filename}"
          chmod -v +x "${file}"
          # Create uncompressed copy
          cp -p "${file}" "compressed/${filename}-normal"
          cp -p "${file}" "${{ env.ARTIFACT_DIR }}/${filename}-normal"
          # Skip unsupported platforms
          if [[ "${filename}" =~ (mips64|mips64le) ]]; then
            echo "Skipping UPX for ${filename}"
          else
            # Compress with UPX
            upx --lzma --best --no-progress "${file}" -o "compressed/${filename}"
            cp -p "compressed/${filename}" "${{ env.ARTIFACT_DIR }}/${filename}"
          fi

      - name: Package IPK
        run: |
          EPOCH=$(date +%s)
          mkdir -p ipk/usr/bin ipk/etc ipk/lib ipk/CONTROL
          for bin in compressed/${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}*; do
            basebin=$(basename "${bin}")

            if [[ "${basebin}" =~ -normal$ ]]; then
              normal_bin="${basebin}"
            else
              compressed_bin="${basebin}"
            fi

            install -m 0755 "${bin}" ipk/usr/bin/tailscaled
            ln -svf tailscaled ipk/usr/bin/tailscale || true
            SIZE=$(du -sb ipk/usr/bin | awk '{print $1}')

            cp -a packaging/etc/* ipk/etc/
            cp -a packaging/lib/* ipk/lib/
            cp -a packaging/CONTROL/* ipk/CONTROL/

            chmod +x ipk/etc/init.d/tailscale || true
            echo '2.0' > debian-binary

            targets_json='${{ toJson(matrix.platform.openwrt_targets) }}'
            targets=$(echo "${targets_json}" | jq -r '.[]')

            for target in ${targets}; do
              ARCH=${target}
              VERSION=$(echo "${{ needs.version-check.outputs.upstream_tag }}" | sed 's/^v//')

              if [[ -z "$compressed_bin" ]]; then
                ipk_compressed="tailscale_${VERSION}_${ARCH}_normal.ipk"
              else
                ipk_compressed="tailscale_${VERSION}_${ARCH}.ipk"
              fi
              ipk_normal="tailscale_${VERSION}_${ARCH}_normal.ipk"

              sed -e "s/__VERSION__/${VERSION}/" \
                  -e "s/__ARCH__/${ARCH}/" \
                  -e "s/__SIZE__/${SIZE}/" \
                  -e "s/__EPOCH__/${EPOCH}/" \
                  packaging/CONTROL/control > ipk/CONTROL/control

              VERSION=${{ needs.version-check.outputs.upstream_tag }}
              tar --format=gnu --numeric-owner --group=0 --owner=0 -czf control.tar.gz -C ipk/CONTROL .
              tar --format=gnu --numeric-owner --group=0 --owner=0 -czf data.tar.gz -C ipk ./usr ./etc ./lib
              if [[ "${bin}" =~ (normal) ]]; then
                tar --format=gnu --numeric-owner --group=0 --owner=0 -cvzf ${{ env.ARTIFACT_DIR }}/tailscale_${VERSION}_${ARCH}_normal.ipk control.tar.gz data.tar.gz debian-binary
                echo "Created IPK: tailscale_${VERSION}_${ARCH}_normal.ipk"
              else
                tar --format=gnu --numeric-owner --group=0 --owner=0 -cvzf ${{ env.ARTIFACT_DIR }}/tailscale_${VERSION}_${ARCH}.ipk control.tar.gz data.tar.gz debian-binary
                echo "Created IPK: tailscale_${VERSION}_${ARCH}.ipk"
              fi

              rm -f control.tar.gz data.tar.gz

            done
            rm -f ipk/usr/bin/*

          done
          
          targets_json='${{ toJson(matrix.platform.openwrt_targets) }}'
          targets=$(echo "${targets_json}" | jq -r '.[]')

          : > ${{ env.ARTIFACT_DIR }}/artifacts.json.tmp

          for target in ${targets}; do
            ARCH=${target}
            VERSION=${{ needs.version-check.outputs.upstream_tag }}

            if [[ "${{ matrix.platform.id }}" =~ ^mips64 ]]; then
              binary_compressed="${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}-normal"
              ipk_compressed="tailscale_${VERSION}_${ARCH}_normal.ipk"
              elif [[ "${{ matrix.platform.id }}" =~ ^mips64le ]]; then
              binary_compressed="${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}-normal"
              ipk_compressed="tailscale_${VERSION}_${ARCH}_normal.ipk"
              else
              binary_compressed="${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}"
              ipk_compressed="tailscale_${VERSION}_${ARCH}.ipk"
            fi

            binary_normal="${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}-normal"
            ipk_normal="tailscale_${VERSION}_${ARCH}_normal.ipk"

            [ -f "${{ env.ARTIFACT_DIR }}/${binary_compressed}" ] || binary_compressed=""
            [ -f "${{ env.ARTIFACT_DIR }}/${binary_normal}" ] || binary_normal=""
            [ -f "${{ env.ARTIFACT_DIR }}/${ipk_compressed}" ] || ipk_compressed=""
            [ -f "${{ env.ARTIFACT_DIR }}/${ipk_normal}" ] || ipk_normal=""

            echo "{\"target\":\"${ARCH}\",\"binary_compressed\":\"${binary_compressed}\",\"binary_normal\":\"${binary_normal}\",\"ipk_compressed\":\"${ipk_compressed}\",\"ipk_normal\":\"${ipk_normal}\"}," >> ${{ env.ARTIFACT_DIR }}/artifacts.json.tmp
          done

          {
            echo "["
            sed '$ s/,$//' ${{ env.ARTIFACT_DIR }}/artifacts.json.tmp
            echo "]"
          } > ${{ env.ARTIFACT_DIR }}/artifacts-${{ matrix.platform.id }}.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-linux-${{ matrix.platform.id }}
          path: ${{ env.ARTIFACT_DIR }}/*

  release:
    name: Create Release
    needs: [version-check, build]
    if: needs.version-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: ${{ needs.version-check.outputs.upstream_tag }}
    steps:
      - name: Prepare workspace
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.ARTIFACT_DIR }}
          merge-multiple: true

      - name: Generate release files
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          jq -s 'add' ${{ env.ARTIFACT_DIR }}/artifacts-*.json > ${{ env.ARTIFACT_DIR }}/artifacts.json
          rm -rf ${{ env.ARTIFACT_DIR }}/artifacts-*.json
          rm -rf ${{ env.ARTIFACT_DIR }}/artifacts.json.tmp
          # Create checksums
          cd ${{ env.ARTIFACT_DIR }}
          sha256sum * > checksums.txt
          
          # Create info file
          {
            echo "Version: ${{ env.RELEASE_TAG }}"
            echo "Build date: ${{ env.BUILD_DATE }}"
            echo ""
            echo "File sizes:"
            for file in ${{ env.FILE_NAME }}-*; do
              size=$(stat -c %s "${file}")
              echo "${file} ${size} bytes"
            done
          } > build-info.txt
          cd ..
      
      - name: Checkout feed branch
        uses: actions/checkout@v4
        with:
          ref: feed
          path: feed

      - name: Clone opkg-utils from Yocto
        run: git clone --depth 1 git://git.yoctoproject.org/opkg-utils || echo "Clone failed"

      - name: Prepare feed files
        run: |
          rm -rf feed/tailscale* feed/Packages* feed/version*
                
          jq -r '
            .[] | select(.ipk_compressed != "") | .ipk_compressed
          ' "${{ env.ARTIFACT_DIR }}/artifacts.json" | while read -r file; do
            cp "${{ env.ARTIFACT_DIR }}/${file}" feed/
          done

          opkg-utils/opkg-make-index -a -f -v --checksum sha256 -v /feed > feed/Packages
          gzip --keep feed/Packages

          generate_tbody() {
            echo "          <tbody>"
            for file in feed/Packages* feed/tailscale*; do
              [ -f "${file}" ] || continue
              fname=$(basename "${file}")
              fsize=$(du -h "${file}" | cut -f1)
              fdate=$(date -r "${file}" +"%Y-%m-%d")
              echo "                        <tr>"
              echo "                            <td><a href=\"$fname\">$fname</a></td>"
              echo "                            <td>$fsize</td>"
              echo "                            <td>$fdate</td>"
              echo "                        </tr>"
            done
            echo "          </tbody>"
          }

          generate_tbody > feed/tbody.tmp
          sed -i '/<!-- tbody-anchor -->/,/<!-- end-tbody-anchor -->/d' feed/index.html
          sed -i '/<!-- tbody-anchor -->/r feed/tbody.tmp' feed/index.html

          current_date="${{ env.BUILD_DATE }}"
          sed -i "s#<span id=\"date\"></span>#<span id=\"date\">${current_date}</span>#" feed/index.html

          version=$(echo "${{ env.RELEASE_TAG }}" | sed 's/^v//')
          sed -i "s#<span id=\"version\"></span>#<span id=\"version\">${version}</span>#" feed/index.html

          rm -f feed/tbody.tmp

      - name: Deploy to feed branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: feed
          publish_branch: feed
          force_orphan: true


      - name: Generate release markdown
        id: generate_release_markdown
        run: |
          # Read artifacts.json and generate markdown table
          artifacts_file="${{ env.ARTIFACT_DIR }}/artifacts.json"
          
          if [[ ! -f "${artifacts_file}" ]]; then
            echo "No artifacts.json found, skipping table generation."
            exit 1
          fi
          
          # Generate Markdown table
          owner="${{ env.REPO_SMALL_OWNER }}"
          repo="${{ env.REPO_SMALL_NAME }}"
          tag="${{ env.RELEASE_TAG }}"
          table="| Target Platform 目标平台 | Compressed Binary 压缩二进制 | Compressed IPK 压缩IPK | Normal Binary 原始二进制 | Normal IPK 原始IPK |
          |----------------------|-------------------------|------------------------|---------------------|----------------|
          $(jq -r --arg owner "$owner" --arg repo "$repo" --arg tag "$tag" '
          .[] | 
          "| \(.target) | " +
          (if .binary_compressed != "" then "[\(.binary_compressed)](https://github.com/\($owner)/\($repo)/releases/download/\($tag)/\(.binary_compressed))" else "" end) + " | " +
          (if .ipk_compressed != "" then "[\(.ipk_compressed)](https://github.com/\($owner)/\($repo)/releases/download/\($tag)/\(.ipk_compressed))" else "" end) + " | " +
          (if .binary_normal != "" then "[\(.binary_normal)](https://github.com/\($owner)/\($repo)/releases/download/\($tag)/\(.binary_normal))" else "" end) + " | " +
          (if .ipk_normal != "" then "[\(.ipk_normal)](https://github.com/\($owner)/\($repo)/releases/download/\($tag)/\(.ipk_normal))" else "" end) + " |"
          ' ${artifacts_file})"

          # Print the table for debugging
          echo "$table"

          # Set release body with table included
          release_body="## 🚀 Smaller Tailscale / 更小的Tailscale

          **Version 版本** :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${{ env.RELEASE_TAG }}   
          **Build date 构建日期** : &nbsp;&nbsp;&nbsp;&nbsp;${{ env.BUILD_DATE }}   
          **Changelog 更新日志** : &nbsp;&nbsp;&nbsp;https://github.com/${{ env.REPO }}/releases/tag/${{ env.RELEASE_TAG }}   

          ---

          ### 🌏 中文说明
          <details>
          <summary>点击展开</summary>
          这是一个为 OpenWRT 构建的 Tailscale 的极简版本，旨在提供更小的二进制文件和更少的资源占用。包含基础二进制文件和 IPK 包，适用于多种 OpenWRT 目标平台。

          ### 🛠️ 构建特性
          - 将 \`tailscale\` 和 \`tailscaled\` 合并为单一二进制文件。  
          - 使用 \`--extra-small\` 编译选项，极大地减少了二进制文件的体积。  
          - 使用 UPX 压缩技术对二进制文件进行压缩（mips64 架构除外），进一步降低存储占用。  

          ### ⚠️ 系统需求
          - **存储空间**: UPX版本小于 10MB  
          - **运行内存**: 大约 60MB  
          - **注意事项**: 可能无法在内存小于 256MB 的设备上正常运行，请谨慎使用。  

          ### 📦 关于未压缩版本
          - \`filename-normal\`: 原始未压缩的二进制文件，适合需要完整功能或不支持 UPX 压缩的场景。  
          - \`filename\`: 使用 UPX 压缩后的二进制文件，体积更小，适合大多数场景。  

          ### 📖 如何确定目标平台
          在您的 OpenWRT 设备上运行以下命令以确定支持的目标平台：  
          \`\`\`bash
          opkg print-architecture
          \`\`\`  
          该命令将列出设备支持的架构类型（不包括 \`all\` 和 \`noarch\`）。根据输出结果选择对应的文件进行安装。

          </details>

          ### 🌎 English Description
          <details>
          <summary>Click to expand</summary>
          This is a minimal build of Tailscale for OpenWRT, designed to provide smaller binaries and lower resource usage. It includes basic binaries and IPK packages for various OpenWRT target platforms.  

          ### 🛠️ Build Features
          - Combined \`tailscale\` and \`tailscaled\` into a single binary.  
          - Built with the \`--extra-small\` flag to significantly reduce binary size.  
          - UPX compression applied to binaries (except for mips64 architecture) to further reduce storage usage.  

          ### ⚠️ System Requirements
          - **Storage Space**: UPX version is less than 10MB.  
          - **RAM**: Approximately 60MB.  
          - **Note**: May not work on devices with less than 256MB of RAM. Use with caution.  

          ### 📦 About the Uncompressed Version
          - \`filename-normal\`: Original uncompressed binary, suitable for scenarios requiring full functionality or where UPX compression is unsupported.  
          - \`filename\`: UPX-compressed binary, smaller in size, suitable for most scenarios.  

          ### 📖 How to Determine the Target Platform
          Run the following command on your OpenWRT device to determine the supported target platform:  
          \`\`\`bash
          opkg print-architecture
          \`\`\`  
          This command will list the supported architecture types (excluding \`all\` and \`noarch\`). Choose the corresponding file based on the output.

          </details>

          ---
            
          > [!WARNING]  
          > 如果 \`opkg\` 安装显示安装失败，请先通过运行以下命令测试：  
          > \`\`\`bash
          > tailscale --version
          > \`\`\`  
          > 如果命令正确输出版本号，则安装成功。否则请提交反馈。
          >  
          > If the \`opkg\` installation shows failure, please test first by running:  
          > \`\`\`bash
          > tailscale --version
          > \`\`\`  
          > If the command correctly outputs the version number, the installation is successful. Otherwise, please submit feedback.

          ---

          ### 📥 Download Links List / 下载链接清单
          > [!NOTE]
          > 请确保选择正确的目标平台架构和tailscale版本。
          > Make sure to select the correct target platform architecture and Tailscale version.
          <details>
          <summary>Click to expand  /  点击展开</summary>

          ${table}
          
          </details>
          "

          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "${release_body}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Smaller ${{ env.SOFTWARE_NAME }} ${{ env.RELEASE_TAG }}"
          body: ${{ steps.generate_release_markdown.outputs.release_body }}
          files: |
            ${{ env.ARTIFACT_DIR }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Sync to small repo
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.git.createTag({
              owner: 'GuNanOvO',
              repo: 'openwrt-tailscale',
              tag: '${{ env.RELEASE_TAG }}',
              message: 'Release ${{ env.RELEASE_TAG }}',
              object: '${{ github.sha }}',
              type: 'commit'
            })